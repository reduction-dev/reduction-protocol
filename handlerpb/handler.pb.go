// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: handlerpb/handler.proto

package handlerpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProcessEventBatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*Event               `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	KeyStates     []*KeyState            `protobuf:"bytes,2,rep,name=key_states,json=keyStates,proto3" json:"key_states,omitempty"`
	Watermark     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=watermark,proto3" json:"watermark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessEventBatchRequest) Reset() {
	*x = ProcessEventBatchRequest{}
	mi := &file_handlerpb_handler_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessEventBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessEventBatchRequest) ProtoMessage() {}

func (x *ProcessEventBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handlerpb_handler_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessEventBatchRequest.ProtoReflect.Descriptor instead.
func (*ProcessEventBatchRequest) Descriptor() ([]byte, []int) {
	return file_handlerpb_handler_proto_rawDescGZIP(), []int{0}
}

func (x *ProcessEventBatchRequest) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ProcessEventBatchRequest) GetKeyStates() []*KeyState {
	if x != nil {
		return x.KeyStates
	}
	return nil
}

func (x *ProcessEventBatchRequest) GetWatermark() *timestamppb.Timestamp {
	if x != nil {
		return x.Watermark
	}
	return nil
}

type KeyState struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Key                  []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	StateEntryNamespaces []*StateEntryNamespace `protobuf:"bytes,2,rep,name=state_entry_namespaces,json=stateEntryNamespaces,proto3" json:"state_entry_namespaces,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *KeyState) Reset() {
	*x = KeyState{}
	mi := &file_handlerpb_handler_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyState) ProtoMessage() {}

func (x *KeyState) ProtoReflect() protoreflect.Message {
	mi := &file_handlerpb_handler_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyState.ProtoReflect.Descriptor instead.
func (*KeyState) Descriptor() ([]byte, []int) {
	return file_handlerpb_handler_proto_rawDescGZIP(), []int{1}
}

func (x *KeyState) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyState) GetStateEntryNamespaces() []*StateEntryNamespace {
	if x != nil {
		return x.StateEntryNamespaces
	}
	return nil
}

type Event struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*Event_KeyedEvent
	//	*Event_TimerExpired
	Event         isEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_handlerpb_handler_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_handlerpb_handler_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_handlerpb_handler_proto_rawDescGZIP(), []int{2}
}

func (x *Event) GetEvent() isEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Event) GetKeyedEvent() *KeyedEvent {
	if x != nil {
		if x, ok := x.Event.(*Event_KeyedEvent); ok {
			return x.KeyedEvent
		}
	}
	return nil
}

func (x *Event) GetTimerExpired() *TimerExpired {
	if x != nil {
		if x, ok := x.Event.(*Event_TimerExpired); ok {
			return x.TimerExpired
		}
	}
	return nil
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_KeyedEvent struct {
	KeyedEvent *KeyedEvent `protobuf:"bytes,1,opt,name=keyed_event,json=keyedEvent,proto3,oneof"`
}

type Event_TimerExpired struct {
	TimerExpired *TimerExpired `protobuf:"bytes,2,opt,name=timer_expired,json=timerExpired,proto3,oneof"`
}

func (*Event_KeyedEvent) isEvent_Event() {}

func (*Event_TimerExpired) isEvent_Event() {}

type TimerExpired struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimerExpired) Reset() {
	*x = TimerExpired{}
	mi := &file_handlerpb_handler_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimerExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerExpired) ProtoMessage() {}

func (x *TimerExpired) ProtoReflect() protoreflect.Message {
	mi := &file_handlerpb_handler_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerExpired.ProtoReflect.Descriptor instead.
func (*TimerExpired) Descriptor() ([]byte, []int) {
	return file_handlerpb_handler_proto_rawDescGZIP(), []int{3}
}

func (x *TimerExpired) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TimerExpired) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type ProcessEventBatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KeyResults    []*KeyResult           `protobuf:"bytes,1,rep,name=key_results,json=keyResults,proto3" json:"key_results,omitempty"`
	SinkRequests  []*SinkRequest         `protobuf:"bytes,3,rep,name=sink_requests,json=sinkRequests,proto3" json:"sink_requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessEventBatchResponse) Reset() {
	*x = ProcessEventBatchResponse{}
	mi := &file_handlerpb_handler_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessEventBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessEventBatchResponse) ProtoMessage() {}

func (x *ProcessEventBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handlerpb_handler_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessEventBatchResponse.ProtoReflect.Descriptor instead.
func (*ProcessEventBatchResponse) Descriptor() ([]byte, []int) {
	return file_handlerpb_handler_proto_rawDescGZIP(), []int{4}
}

func (x *ProcessEventBatchResponse) GetKeyResults() []*KeyResult {
	if x != nil {
		return x.KeyResults
	}
	return nil
}

func (x *ProcessEventBatchResponse) GetSinkRequests() []*SinkRequest {
	if x != nil {
		return x.SinkRequests
	}
	return nil
}

type KeyEventBatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        [][]byte               `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyEventBatchRequest) Reset() {
	*x = KeyEventBatchRequest{}
	mi := &file_handlerpb_handler_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyEventBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyEventBatchRequest) ProtoMessage() {}

func (x *KeyEventBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handlerpb_handler_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyEventBatchRequest.ProtoReflect.Descriptor instead.
func (*KeyEventBatchRequest) Descriptor() ([]byte, []int) {
	return file_handlerpb_handler_proto_rawDescGZIP(), []int{5}
}

func (x *KeyEventBatchRequest) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

type KeyEventBatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*KeyEventResult      `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyEventBatchResponse) Reset() {
	*x = KeyEventBatchResponse{}
	mi := &file_handlerpb_handler_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyEventBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyEventBatchResponse) ProtoMessage() {}

func (x *KeyEventBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handlerpb_handler_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyEventBatchResponse.ProtoReflect.Descriptor instead.
func (*KeyEventBatchResponse) Descriptor() ([]byte, []int) {
	return file_handlerpb_handler_proto_rawDescGZIP(), []int{6}
}

func (x *KeyEventBatchResponse) GetResults() []*KeyEventResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type KeyEventResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*KeyedEvent          `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyEventResult) Reset() {
	*x = KeyEventResult{}
	mi := &file_handlerpb_handler_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyEventResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyEventResult) ProtoMessage() {}

func (x *KeyEventResult) ProtoReflect() protoreflect.Message {
	mi := &file_handlerpb_handler_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyEventResult.ProtoReflect.Descriptor instead.
func (*KeyEventResult) Descriptor() ([]byte, []int) {
	return file_handlerpb_handler_proto_rawDescGZIP(), []int{7}
}

func (x *KeyEventResult) GetEvents() []*KeyedEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type KeyedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value         []byte                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyedEvent) Reset() {
	*x = KeyedEvent{}
	mi := &file_handlerpb_handler_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyedEvent) ProtoMessage() {}

func (x *KeyedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_handlerpb_handler_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyedEvent.ProtoReflect.Descriptor instead.
func (*KeyedEvent) Descriptor() ([]byte, []int) {
	return file_handlerpb_handler_proto_rawDescGZIP(), []int{8}
}

func (x *KeyedEvent) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyedEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *KeyedEvent) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type StateEntryNamespace struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Entries       []*StateEntry          `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateEntryNamespace) Reset() {
	*x = StateEntryNamespace{}
	mi := &file_handlerpb_handler_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateEntryNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateEntryNamespace) ProtoMessage() {}

func (x *StateEntryNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_handlerpb_handler_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateEntryNamespace.ProtoReflect.Descriptor instead.
func (*StateEntryNamespace) Descriptor() ([]byte, []int) {
	return file_handlerpb_handler_proto_rawDescGZIP(), []int{9}
}

func (x *StateEntryNamespace) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *StateEntryNamespace) GetEntries() []*StateEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type StateEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateEntry) Reset() {
	*x = StateEntry{}
	mi := &file_handlerpb_handler_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateEntry) ProtoMessage() {}

func (x *StateEntry) ProtoReflect() protoreflect.Message {
	mi := &file_handlerpb_handler_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateEntry.ProtoReflect.Descriptor instead.
func (*StateEntry) Descriptor() ([]byte, []int) {
	return file_handlerpb_handler_proto_rawDescGZIP(), []int{10}
}

func (x *StateEntry) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StateEntry) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type KeyResult struct {
	state                   protoimpl.MessageState    `protogen:"open.v1"`
	Key                     []byte                    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	NewTimers               []*timestamppb.Timestamp  `protobuf:"bytes,2,rep,name=new_timers,json=newTimers,proto3" json:"new_timers,omitempty"`
	StateMutationNamespaces []*StateMutationNamespace `protobuf:"bytes,3,rep,name=state_mutation_namespaces,json=stateMutationNamespaces,proto3" json:"state_mutation_namespaces,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *KeyResult) Reset() {
	*x = KeyResult{}
	mi := &file_handlerpb_handler_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyResult) ProtoMessage() {}

func (x *KeyResult) ProtoReflect() protoreflect.Message {
	mi := &file_handlerpb_handler_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyResult.ProtoReflect.Descriptor instead.
func (*KeyResult) Descriptor() ([]byte, []int) {
	return file_handlerpb_handler_proto_rawDescGZIP(), []int{11}
}

func (x *KeyResult) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyResult) GetNewTimers() []*timestamppb.Timestamp {
	if x != nil {
		return x.NewTimers
	}
	return nil
}

func (x *KeyResult) GetStateMutationNamespaces() []*StateMutationNamespace {
	if x != nil {
		return x.StateMutationNamespaces
	}
	return nil
}

type StateMutationNamespace struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Mutations     []*StateMutation       `protobuf:"bytes,2,rep,name=mutations,proto3" json:"mutations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateMutationNamespace) Reset() {
	*x = StateMutationNamespace{}
	mi := &file_handlerpb_handler_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateMutationNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateMutationNamespace) ProtoMessage() {}

func (x *StateMutationNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_handlerpb_handler_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateMutationNamespace.ProtoReflect.Descriptor instead.
func (*StateMutationNamespace) Descriptor() ([]byte, []int) {
	return file_handlerpb_handler_proto_rawDescGZIP(), []int{12}
}

func (x *StateMutationNamespace) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *StateMutationNamespace) GetMutations() []*StateMutation {
	if x != nil {
		return x.Mutations
	}
	return nil
}

type StateMutation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Mutation:
	//
	//	*StateMutation_Delete
	//	*StateMutation_Put
	Mutation      isStateMutation_Mutation `protobuf_oneof:"mutation"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateMutation) Reset() {
	*x = StateMutation{}
	mi := &file_handlerpb_handler_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateMutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateMutation) ProtoMessage() {}

func (x *StateMutation) ProtoReflect() protoreflect.Message {
	mi := &file_handlerpb_handler_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateMutation.ProtoReflect.Descriptor instead.
func (*StateMutation) Descriptor() ([]byte, []int) {
	return file_handlerpb_handler_proto_rawDescGZIP(), []int{13}
}

func (x *StateMutation) GetMutation() isStateMutation_Mutation {
	if x != nil {
		return x.Mutation
	}
	return nil
}

func (x *StateMutation) GetDelete() *DeleteMutation {
	if x != nil {
		if x, ok := x.Mutation.(*StateMutation_Delete); ok {
			return x.Delete
		}
	}
	return nil
}

func (x *StateMutation) GetPut() *PutMutation {
	if x != nil {
		if x, ok := x.Mutation.(*StateMutation_Put); ok {
			return x.Put
		}
	}
	return nil
}

type isStateMutation_Mutation interface {
	isStateMutation_Mutation()
}

type StateMutation_Delete struct {
	Delete *DeleteMutation `protobuf:"bytes,1,opt,name=delete,proto3,oneof"`
}

type StateMutation_Put struct {
	Put *PutMutation `protobuf:"bytes,2,opt,name=put,proto3,oneof"`
}

func (*StateMutation_Delete) isStateMutation_Mutation() {}

func (*StateMutation_Put) isStateMutation_Mutation() {}

type Timer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Timer) Reset() {
	*x = Timer{}
	mi := &file_handlerpb_handler_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Timer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timer) ProtoMessage() {}

func (x *Timer) ProtoReflect() protoreflect.Message {
	mi := &file_handlerpb_handler_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timer.ProtoReflect.Descriptor instead.
func (*Timer) Descriptor() ([]byte, []int) {
	return file_handlerpb_handler_proto_rawDescGZIP(), []int{14}
}

func (x *Timer) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Timer) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type DeleteMutation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMutation) Reset() {
	*x = DeleteMutation{}
	mi := &file_handlerpb_handler_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMutation) ProtoMessage() {}

func (x *DeleteMutation) ProtoReflect() protoreflect.Message {
	mi := &file_handlerpb_handler_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMutation.ProtoReflect.Descriptor instead.
func (*DeleteMutation) Descriptor() ([]byte, []int) {
	return file_handlerpb_handler_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteMutation) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type PutMutation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PutMutation) Reset() {
	*x = PutMutation{}
	mi := &file_handlerpb_handler_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutMutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutMutation) ProtoMessage() {}

func (x *PutMutation) ProtoReflect() protoreflect.Message {
	mi := &file_handlerpb_handler_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutMutation.ProtoReflect.Descriptor instead.
func (*PutMutation) Descriptor() ([]byte, []int) {
	return file_handlerpb_handler_proto_rawDescGZIP(), []int{16}
}

func (x *PutMutation) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PutMutation) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type SinkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SinkRequest) Reset() {
	*x = SinkRequest{}
	mi := &file_handlerpb_handler_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SinkRequest) ProtoMessage() {}

func (x *SinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handlerpb_handler_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SinkRequest.ProtoReflect.Descriptor instead.
func (*SinkRequest) Descriptor() ([]byte, []int) {
	return file_handlerpb_handler_proto_rawDescGZIP(), []int{17}
}

func (x *SinkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SinkRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_handlerpb_handler_proto protoreflect.FileDescriptor

var file_handlerpb_handler_proto_rawDesc = []byte{
	0x0a, 0x17, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x70, 0x62, 0x2f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x64, 0x65, 0x76, 0x2e, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xca, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x2e, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x7e,
	0x0a, 0x08, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x60, 0x0a, 0x16,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x14, 0x73, 0x74, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0xa2,
	0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x65,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4a,
	0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0xa7, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x47, 0x0a, 0x0d, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e,
	0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x2e, 0x0a, 0x14, 0x4b, 0x65, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x15, 0x4b, 0x65, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0x4b, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x4b, 0x65,
	0x79, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x6e, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x70, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x22, 0x34, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x09, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x73, 0x12, 0x69, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x17, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x7a,
	0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x36, 0x0a,
	0x03, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x2e, 0x50, 0x75, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x03, 0x70, 0x75, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x53, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x22, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x35, 0x0a, 0x0b, 0x50, 0x75,
	0x74, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x33, 0x0a, 0x0b, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0xed, 0x01, 0x0a, 0x07, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x12, 0x76, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2f, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0d, 0x4b, 0x65,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x2e, 0x4b, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2c, 0x5a, 0x2a, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_handlerpb_handler_proto_rawDescOnce sync.Once
	file_handlerpb_handler_proto_rawDescData = file_handlerpb_handler_proto_rawDesc
)

func file_handlerpb_handler_proto_rawDescGZIP() []byte {
	file_handlerpb_handler_proto_rawDescOnce.Do(func() {
		file_handlerpb_handler_proto_rawDescData = protoimpl.X.CompressGZIP(file_handlerpb_handler_proto_rawDescData)
	})
	return file_handlerpb_handler_proto_rawDescData
}

var file_handlerpb_handler_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_handlerpb_handler_proto_goTypes = []any{
	(*ProcessEventBatchRequest)(nil),  // 0: dev.reduction.handler.ProcessEventBatchRequest
	(*KeyState)(nil),                  // 1: dev.reduction.handler.KeyState
	(*Event)(nil),                     // 2: dev.reduction.handler.Event
	(*TimerExpired)(nil),              // 3: dev.reduction.handler.TimerExpired
	(*ProcessEventBatchResponse)(nil), // 4: dev.reduction.handler.ProcessEventBatchResponse
	(*KeyEventBatchRequest)(nil),      // 5: dev.reduction.handler.KeyEventBatchRequest
	(*KeyEventBatchResponse)(nil),     // 6: dev.reduction.handler.KeyEventBatchResponse
	(*KeyEventResult)(nil),            // 7: dev.reduction.handler.KeyEventResult
	(*KeyedEvent)(nil),                // 8: dev.reduction.handler.KeyedEvent
	(*StateEntryNamespace)(nil),       // 9: dev.reduction.handler.StateEntryNamespace
	(*StateEntry)(nil),                // 10: dev.reduction.handler.StateEntry
	(*KeyResult)(nil),                 // 11: dev.reduction.handler.KeyResult
	(*StateMutationNamespace)(nil),    // 12: dev.reduction.handler.StateMutationNamespace
	(*StateMutation)(nil),             // 13: dev.reduction.handler.StateMutation
	(*Timer)(nil),                     // 14: dev.reduction.handler.Timer
	(*DeleteMutation)(nil),            // 15: dev.reduction.handler.DeleteMutation
	(*PutMutation)(nil),               // 16: dev.reduction.handler.PutMutation
	(*SinkRequest)(nil),               // 17: dev.reduction.handler.SinkRequest
	(*timestamppb.Timestamp)(nil),     // 18: google.protobuf.Timestamp
}
var file_handlerpb_handler_proto_depIdxs = []int32{
	2,  // 0: dev.reduction.handler.ProcessEventBatchRequest.events:type_name -> dev.reduction.handler.Event
	1,  // 1: dev.reduction.handler.ProcessEventBatchRequest.key_states:type_name -> dev.reduction.handler.KeyState
	18, // 2: dev.reduction.handler.ProcessEventBatchRequest.watermark:type_name -> google.protobuf.Timestamp
	9,  // 3: dev.reduction.handler.KeyState.state_entry_namespaces:type_name -> dev.reduction.handler.StateEntryNamespace
	8,  // 4: dev.reduction.handler.Event.keyed_event:type_name -> dev.reduction.handler.KeyedEvent
	3,  // 5: dev.reduction.handler.Event.timer_expired:type_name -> dev.reduction.handler.TimerExpired
	18, // 6: dev.reduction.handler.TimerExpired.timestamp:type_name -> google.protobuf.Timestamp
	11, // 7: dev.reduction.handler.ProcessEventBatchResponse.key_results:type_name -> dev.reduction.handler.KeyResult
	17, // 8: dev.reduction.handler.ProcessEventBatchResponse.sink_requests:type_name -> dev.reduction.handler.SinkRequest
	7,  // 9: dev.reduction.handler.KeyEventBatchResponse.results:type_name -> dev.reduction.handler.KeyEventResult
	8,  // 10: dev.reduction.handler.KeyEventResult.events:type_name -> dev.reduction.handler.KeyedEvent
	18, // 11: dev.reduction.handler.KeyedEvent.timestamp:type_name -> google.protobuf.Timestamp
	10, // 12: dev.reduction.handler.StateEntryNamespace.entries:type_name -> dev.reduction.handler.StateEntry
	18, // 13: dev.reduction.handler.KeyResult.new_timers:type_name -> google.protobuf.Timestamp
	12, // 14: dev.reduction.handler.KeyResult.state_mutation_namespaces:type_name -> dev.reduction.handler.StateMutationNamespace
	13, // 15: dev.reduction.handler.StateMutationNamespace.mutations:type_name -> dev.reduction.handler.StateMutation
	15, // 16: dev.reduction.handler.StateMutation.delete:type_name -> dev.reduction.handler.DeleteMutation
	16, // 17: dev.reduction.handler.StateMutation.put:type_name -> dev.reduction.handler.PutMutation
	18, // 18: dev.reduction.handler.Timer.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 19: dev.reduction.handler.Handler.ProcessEventBatch:input_type -> dev.reduction.handler.ProcessEventBatchRequest
	5,  // 20: dev.reduction.handler.Handler.KeyEventBatch:input_type -> dev.reduction.handler.KeyEventBatchRequest
	4,  // 21: dev.reduction.handler.Handler.ProcessEventBatch:output_type -> dev.reduction.handler.ProcessEventBatchResponse
	6,  // 22: dev.reduction.handler.Handler.KeyEventBatch:output_type -> dev.reduction.handler.KeyEventBatchResponse
	21, // [21:23] is the sub-list for method output_type
	19, // [19:21] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_handlerpb_handler_proto_init() }
func file_handlerpb_handler_proto_init() {
	if File_handlerpb_handler_proto != nil {
		return
	}
	file_handlerpb_handler_proto_msgTypes[2].OneofWrappers = []any{
		(*Event_KeyedEvent)(nil),
		(*Event_TimerExpired)(nil),
	}
	file_handlerpb_handler_proto_msgTypes[13].OneofWrappers = []any{
		(*StateMutation_Delete)(nil),
		(*StateMutation_Put)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_handlerpb_handler_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_handlerpb_handler_proto_goTypes,
		DependencyIndexes: file_handlerpb_handler_proto_depIdxs,
		MessageInfos:      file_handlerpb_handler_proto_msgTypes,
	}.Build()
	File_handlerpb_handler_proto = out.File
	file_handlerpb_handler_proto_rawDesc = nil
	file_handlerpb_handler_proto_goTypes = nil
	file_handlerpb_handler_proto_depIdxs = nil
}
