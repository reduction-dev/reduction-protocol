// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: handlerpb/handler.proto

package handlerpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	handlerpb "reduction.dev/reduction-handler/handlerpb"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HandlerName is the fully-qualified name of the Handler service.
	HandlerName = "dev.reduction.handler.Handler"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HandlerOnEventProcedure is the fully-qualified name of the Handler's OnEvent RPC.
	HandlerOnEventProcedure = "/dev.reduction.handler.Handler/OnEvent"
	// HandlerOnTimerExpiredProcedure is the fully-qualified name of the Handler's OnTimerExpired RPC.
	HandlerOnTimerExpiredProcedure = "/dev.reduction.handler.Handler/OnTimerExpired"
	// HandlerKeyEventProcedure is the fully-qualified name of the Handler's KeyEvent RPC.
	HandlerKeyEventProcedure = "/dev.reduction.handler.Handler/KeyEvent"
)

// HandlerClient is a client for the dev.reduction.handler.Handler service.
type HandlerClient interface {
	OnEvent(context.Context, *connect.Request[handlerpb.OnEventRequest]) (*connect.Response[handlerpb.HandlerResponse], error)
	OnTimerExpired(context.Context, *connect.Request[handlerpb.OnTimerExpiredRequest]) (*connect.Response[handlerpb.HandlerResponse], error)
	KeyEvent(context.Context, *connect.Request[handlerpb.KeyEventRequest]) (*connect.Response[handlerpb.KeyEventResponse], error)
}

// NewHandlerClient constructs a client for the dev.reduction.handler.Handler service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHandlerClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HandlerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	handlerMethods := handlerpb.File_handlerpb_handler_proto.Services().ByName("Handler").Methods()
	return &handlerClient{
		onEvent: connect.NewClient[handlerpb.OnEventRequest, handlerpb.HandlerResponse](
			httpClient,
			baseURL+HandlerOnEventProcedure,
			connect.WithSchema(handlerMethods.ByName("OnEvent")),
			connect.WithClientOptions(opts...),
		),
		onTimerExpired: connect.NewClient[handlerpb.OnTimerExpiredRequest, handlerpb.HandlerResponse](
			httpClient,
			baseURL+HandlerOnTimerExpiredProcedure,
			connect.WithSchema(handlerMethods.ByName("OnTimerExpired")),
			connect.WithClientOptions(opts...),
		),
		keyEvent: connect.NewClient[handlerpb.KeyEventRequest, handlerpb.KeyEventResponse](
			httpClient,
			baseURL+HandlerKeyEventProcedure,
			connect.WithSchema(handlerMethods.ByName("KeyEvent")),
			connect.WithClientOptions(opts...),
		),
	}
}

// handlerClient implements HandlerClient.
type handlerClient struct {
	onEvent        *connect.Client[handlerpb.OnEventRequest, handlerpb.HandlerResponse]
	onTimerExpired *connect.Client[handlerpb.OnTimerExpiredRequest, handlerpb.HandlerResponse]
	keyEvent       *connect.Client[handlerpb.KeyEventRequest, handlerpb.KeyEventResponse]
}

// OnEvent calls dev.reduction.handler.Handler.OnEvent.
func (c *handlerClient) OnEvent(ctx context.Context, req *connect.Request[handlerpb.OnEventRequest]) (*connect.Response[handlerpb.HandlerResponse], error) {
	return c.onEvent.CallUnary(ctx, req)
}

// OnTimerExpired calls dev.reduction.handler.Handler.OnTimerExpired.
func (c *handlerClient) OnTimerExpired(ctx context.Context, req *connect.Request[handlerpb.OnTimerExpiredRequest]) (*connect.Response[handlerpb.HandlerResponse], error) {
	return c.onTimerExpired.CallUnary(ctx, req)
}

// KeyEvent calls dev.reduction.handler.Handler.KeyEvent.
func (c *handlerClient) KeyEvent(ctx context.Context, req *connect.Request[handlerpb.KeyEventRequest]) (*connect.Response[handlerpb.KeyEventResponse], error) {
	return c.keyEvent.CallUnary(ctx, req)
}

// HandlerHandler is an implementation of the dev.reduction.handler.Handler service.
type HandlerHandler interface {
	OnEvent(context.Context, *connect.Request[handlerpb.OnEventRequest]) (*connect.Response[handlerpb.HandlerResponse], error)
	OnTimerExpired(context.Context, *connect.Request[handlerpb.OnTimerExpiredRequest]) (*connect.Response[handlerpb.HandlerResponse], error)
	KeyEvent(context.Context, *connect.Request[handlerpb.KeyEventRequest]) (*connect.Response[handlerpb.KeyEventResponse], error)
}

// NewHandlerHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHandlerHandler(svc HandlerHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	handlerMethods := handlerpb.File_handlerpb_handler_proto.Services().ByName("Handler").Methods()
	handlerOnEventHandler := connect.NewUnaryHandler(
		HandlerOnEventProcedure,
		svc.OnEvent,
		connect.WithSchema(handlerMethods.ByName("OnEvent")),
		connect.WithHandlerOptions(opts...),
	)
	handlerOnTimerExpiredHandler := connect.NewUnaryHandler(
		HandlerOnTimerExpiredProcedure,
		svc.OnTimerExpired,
		connect.WithSchema(handlerMethods.ByName("OnTimerExpired")),
		connect.WithHandlerOptions(opts...),
	)
	handlerKeyEventHandler := connect.NewUnaryHandler(
		HandlerKeyEventProcedure,
		svc.KeyEvent,
		connect.WithSchema(handlerMethods.ByName("KeyEvent")),
		connect.WithHandlerOptions(opts...),
	)
	return "/dev.reduction.handler.Handler/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HandlerOnEventProcedure:
			handlerOnEventHandler.ServeHTTP(w, r)
		case HandlerOnTimerExpiredProcedure:
			handlerOnTimerExpiredHandler.ServeHTTP(w, r)
		case HandlerKeyEventProcedure:
			handlerKeyEventHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHandlerHandler returns CodeUnimplemented from all methods.
type UnimplementedHandlerHandler struct{}

func (UnimplementedHandlerHandler) OnEvent(context.Context, *connect.Request[handlerpb.OnEventRequest]) (*connect.Response[handlerpb.HandlerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dev.reduction.handler.Handler.OnEvent is not implemented"))
}

func (UnimplementedHandlerHandler) OnTimerExpired(context.Context, *connect.Request[handlerpb.OnTimerExpiredRequest]) (*connect.Response[handlerpb.HandlerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dev.reduction.handler.Handler.OnTimerExpired is not implemented"))
}

func (UnimplementedHandlerHandler) KeyEvent(context.Context, *connect.Request[handlerpb.KeyEventRequest]) (*connect.Response[handlerpb.KeyEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dev.reduction.handler.Handler.KeyEvent is not implemented"))
}
