// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: testrunpb/testrun.proto

package testrunpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	handlerpb "reduction.dev/reduction-protocol/handlerpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RunnerCommand struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Command:
	//
	//	*RunnerCommand_AddKeyedEvent
	//	*RunnerCommand_AddWatermark
	//	*RunnerCommand_Run
	Command       isRunnerCommand_Command `protobuf_oneof:"command"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunnerCommand) Reset() {
	*x = RunnerCommand{}
	mi := &file_testrunpb_testrun_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerCommand) ProtoMessage() {}

func (x *RunnerCommand) ProtoReflect() protoreflect.Message {
	mi := &file_testrunpb_testrun_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerCommand.ProtoReflect.Descriptor instead.
func (*RunnerCommand) Descriptor() ([]byte, []int) {
	return file_testrunpb_testrun_proto_rawDescGZIP(), []int{0}
}

func (x *RunnerCommand) GetCommand() isRunnerCommand_Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *RunnerCommand) GetAddKeyedEvent() *AddKeyedEvent {
	if x != nil {
		if x, ok := x.Command.(*RunnerCommand_AddKeyedEvent); ok {
			return x.AddKeyedEvent
		}
	}
	return nil
}

func (x *RunnerCommand) GetAddWatermark() *AddWatermark {
	if x != nil {
		if x, ok := x.Command.(*RunnerCommand_AddWatermark); ok {
			return x.AddWatermark
		}
	}
	return nil
}

func (x *RunnerCommand) GetRun() *Run {
	if x != nil {
		if x, ok := x.Command.(*RunnerCommand_Run); ok {
			return x.Run
		}
	}
	return nil
}

type isRunnerCommand_Command interface {
	isRunnerCommand_Command()
}

type RunnerCommand_AddKeyedEvent struct {
	AddKeyedEvent *AddKeyedEvent `protobuf:"bytes,1,opt,name=add_keyed_event,json=addKeyedEvent,proto3,oneof"`
}

type RunnerCommand_AddWatermark struct {
	AddWatermark *AddWatermark `protobuf:"bytes,2,opt,name=add_watermark,json=addWatermark,proto3,oneof"`
}

type RunnerCommand_Run struct {
	Run *Run `protobuf:"bytes,3,opt,name=run,proto3,oneof"`
}

func (*RunnerCommand_AddKeyedEvent) isRunnerCommand_Command() {}

func (*RunnerCommand_AddWatermark) isRunnerCommand_Command() {}

func (*RunnerCommand_Run) isRunnerCommand_Command() {}

type HandlerCommand struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Command:
	//
	//	*HandlerCommand_ProcessEventBatch
	//	*HandlerCommand_KeyEventBatch
	Command       isHandlerCommand_Command `protobuf_oneof:"command"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandlerCommand) Reset() {
	*x = HandlerCommand{}
	mi := &file_testrunpb_testrun_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandlerCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandlerCommand) ProtoMessage() {}

func (x *HandlerCommand) ProtoReflect() protoreflect.Message {
	mi := &file_testrunpb_testrun_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandlerCommand.ProtoReflect.Descriptor instead.
func (*HandlerCommand) Descriptor() ([]byte, []int) {
	return file_testrunpb_testrun_proto_rawDescGZIP(), []int{1}
}

func (x *HandlerCommand) GetCommand() isHandlerCommand_Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *HandlerCommand) GetProcessEventBatch() *ProcessEventBatch {
	if x != nil {
		if x, ok := x.Command.(*HandlerCommand_ProcessEventBatch); ok {
			return x.ProcessEventBatch
		}
	}
	return nil
}

func (x *HandlerCommand) GetKeyEventBatch() *KeyEventBatch {
	if x != nil {
		if x, ok := x.Command.(*HandlerCommand_KeyEventBatch); ok {
			return x.KeyEventBatch
		}
	}
	return nil
}

type isHandlerCommand_Command interface {
	isHandlerCommand_Command()
}

type HandlerCommand_ProcessEventBatch struct {
	ProcessEventBatch *ProcessEventBatch `protobuf:"bytes,1,opt,name=process_event_batch,json=processEventBatch,proto3,oneof"`
}

type HandlerCommand_KeyEventBatch struct {
	KeyEventBatch *KeyEventBatch `protobuf:"bytes,2,opt,name=key_event_batch,json=keyEventBatch,proto3,oneof"`
}

func (*HandlerCommand_ProcessEventBatch) isHandlerCommand_Command() {}

func (*HandlerCommand_KeyEventBatch) isHandlerCommand_Command() {}

type AddKeyedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KeyedEvent    *handlerpb.KeyedEvent  `protobuf:"bytes,1,opt,name=keyed_event,json=keyedEvent,proto3" json:"keyed_event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddKeyedEvent) Reset() {
	*x = AddKeyedEvent{}
	mi := &file_testrunpb_testrun_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddKeyedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKeyedEvent) ProtoMessage() {}

func (x *AddKeyedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_testrunpb_testrun_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKeyedEvent.ProtoReflect.Descriptor instead.
func (*AddKeyedEvent) Descriptor() ([]byte, []int) {
	return file_testrunpb_testrun_proto_rawDescGZIP(), []int{2}
}

func (x *AddKeyedEvent) GetKeyedEvent() *handlerpb.KeyedEvent {
	if x != nil {
		return x.KeyedEvent
	}
	return nil
}

type AddWatermark struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddWatermark) Reset() {
	*x = AddWatermark{}
	mi := &file_testrunpb_testrun_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddWatermark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWatermark) ProtoMessage() {}

func (x *AddWatermark) ProtoReflect() protoreflect.Message {
	mi := &file_testrunpb_testrun_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWatermark.ProtoReflect.Descriptor instead.
func (*AddWatermark) Descriptor() ([]byte, []int) {
	return file_testrunpb_testrun_proto_rawDescGZIP(), []int{3}
}

type Run struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Run) Reset() {
	*x = Run{}
	mi := &file_testrunpb_testrun_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Run) ProtoMessage() {}

func (x *Run) ProtoReflect() protoreflect.Message {
	mi := &file_testrunpb_testrun_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Run.ProtoReflect.Descriptor instead.
func (*Run) Descriptor() ([]byte, []int) {
	return file_testrunpb_testrun_proto_rawDescGZIP(), []int{4}
}

type ProcessEventBatch struct {
	state                    protoimpl.MessageState              `protogen:"open.v1"`
	ProcessEventBatchRequest *handlerpb.ProcessEventBatchRequest `protobuf:"bytes,1,opt,name=process_event_batch_request,json=processEventBatchRequest,proto3" json:"process_event_batch_request,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ProcessEventBatch) Reset() {
	*x = ProcessEventBatch{}
	mi := &file_testrunpb_testrun_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessEventBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessEventBatch) ProtoMessage() {}

func (x *ProcessEventBatch) ProtoReflect() protoreflect.Message {
	mi := &file_testrunpb_testrun_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessEventBatch.ProtoReflect.Descriptor instead.
func (*ProcessEventBatch) Descriptor() ([]byte, []int) {
	return file_testrunpb_testrun_proto_rawDescGZIP(), []int{5}
}

func (x *ProcessEventBatch) GetProcessEventBatchRequest() *handlerpb.ProcessEventBatchRequest {
	if x != nil {
		return x.ProcessEventBatchRequest
	}
	return nil
}

type KeyEventBatch struct {
	state                protoimpl.MessageState          `protogen:"open.v1"`
	KeyEventBatchRequest *handlerpb.KeyEventBatchRequest `protobuf:"bytes,1,opt,name=key_event_batch_request,json=keyEventBatchRequest,proto3" json:"key_event_batch_request,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *KeyEventBatch) Reset() {
	*x = KeyEventBatch{}
	mi := &file_testrunpb_testrun_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyEventBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyEventBatch) ProtoMessage() {}

func (x *KeyEventBatch) ProtoReflect() protoreflect.Message {
	mi := &file_testrunpb_testrun_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyEventBatch.ProtoReflect.Descriptor instead.
func (*KeyEventBatch) Descriptor() ([]byte, []int) {
	return file_testrunpb_testrun_proto_rawDescGZIP(), []int{6}
}

func (x *KeyEventBatch) GetKeyEventBatchRequest() *handlerpb.KeyEventBatchRequest {
	if x != nil {
		return x.KeyEventBatchRequest
	}
	return nil
}

var File_testrunpb_testrun_proto protoreflect.FileDescriptor

var file_testrunpb_testrun_proto_rawDesc = []byte{
	0x0a, 0x17, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x70, 0x62, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x64, 0x65, 0x76, 0x2e, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e,
	0x1a, 0x17, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x70, 0x62, 0x2f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x01, 0x0a, 0x0d, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x0f, 0x61,
	0x64, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x2e, 0x41, 0x64, 0x64,
	0x4b, 0x65, 0x79, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x64,
	0x64, 0x4b, 0x65, 0x79, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x61,
	0x64, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2e, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x2e, 0x52, 0x75, 0x6e,
	0x48, 0x00, 0x52, 0x03, 0x72, 0x75, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x0e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x5a, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x11,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x4e, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x72,
	0x75, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x48, 0x00, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x53, 0x0a, 0x0d,
	0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a,
	0x0b, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x22, 0x05, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x6e,
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x73,
	0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x62, 0x0a, 0x17, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x14, 0x6b,
	0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x2c, 0x5a, 0x2a, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x64, 0x65, 0x76, 0x2f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_testrunpb_testrun_proto_rawDescOnce sync.Once
	file_testrunpb_testrun_proto_rawDescData = file_testrunpb_testrun_proto_rawDesc
)

func file_testrunpb_testrun_proto_rawDescGZIP() []byte {
	file_testrunpb_testrun_proto_rawDescOnce.Do(func() {
		file_testrunpb_testrun_proto_rawDescData = protoimpl.X.CompressGZIP(file_testrunpb_testrun_proto_rawDescData)
	})
	return file_testrunpb_testrun_proto_rawDescData
}

var file_testrunpb_testrun_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_testrunpb_testrun_proto_goTypes = []any{
	(*RunnerCommand)(nil),                      // 0: dev.reduction.testrun.RunnerCommand
	(*HandlerCommand)(nil),                     // 1: dev.reduction.testrun.HandlerCommand
	(*AddKeyedEvent)(nil),                      // 2: dev.reduction.testrun.AddKeyedEvent
	(*AddWatermark)(nil),                       // 3: dev.reduction.testrun.AddWatermark
	(*Run)(nil),                                // 4: dev.reduction.testrun.Run
	(*ProcessEventBatch)(nil),                  // 5: dev.reduction.testrun.ProcessEventBatch
	(*KeyEventBatch)(nil),                      // 6: dev.reduction.testrun.KeyEventBatch
	(*handlerpb.KeyedEvent)(nil),               // 7: dev.reduction.handler.KeyedEvent
	(*handlerpb.ProcessEventBatchRequest)(nil), // 8: dev.reduction.handler.ProcessEventBatchRequest
	(*handlerpb.KeyEventBatchRequest)(nil),     // 9: dev.reduction.handler.KeyEventBatchRequest
}
var file_testrunpb_testrun_proto_depIdxs = []int32{
	2, // 0: dev.reduction.testrun.RunnerCommand.add_keyed_event:type_name -> dev.reduction.testrun.AddKeyedEvent
	3, // 1: dev.reduction.testrun.RunnerCommand.add_watermark:type_name -> dev.reduction.testrun.AddWatermark
	4, // 2: dev.reduction.testrun.RunnerCommand.run:type_name -> dev.reduction.testrun.Run
	5, // 3: dev.reduction.testrun.HandlerCommand.process_event_batch:type_name -> dev.reduction.testrun.ProcessEventBatch
	6, // 4: dev.reduction.testrun.HandlerCommand.key_event_batch:type_name -> dev.reduction.testrun.KeyEventBatch
	7, // 5: dev.reduction.testrun.AddKeyedEvent.keyed_event:type_name -> dev.reduction.handler.KeyedEvent
	8, // 6: dev.reduction.testrun.ProcessEventBatch.process_event_batch_request:type_name -> dev.reduction.handler.ProcessEventBatchRequest
	9, // 7: dev.reduction.testrun.KeyEventBatch.key_event_batch_request:type_name -> dev.reduction.handler.KeyEventBatchRequest
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_testrunpb_testrun_proto_init() }
func file_testrunpb_testrun_proto_init() {
	if File_testrunpb_testrun_proto != nil {
		return
	}
	file_testrunpb_testrun_proto_msgTypes[0].OneofWrappers = []any{
		(*RunnerCommand_AddKeyedEvent)(nil),
		(*RunnerCommand_AddWatermark)(nil),
		(*RunnerCommand_Run)(nil),
	}
	file_testrunpb_testrun_proto_msgTypes[1].OneofWrappers = []any{
		(*HandlerCommand_ProcessEventBatch)(nil),
		(*HandlerCommand_KeyEventBatch)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_testrunpb_testrun_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_testrunpb_testrun_proto_goTypes,
		DependencyIndexes: file_testrunpb_testrun_proto_depIdxs,
		MessageInfos:      file_testrunpb_testrun_proto_msgTypes,
	}.Build()
	File_testrunpb_testrun_proto = out.File
	file_testrunpb_testrun_proto_rawDesc = nil
	file_testrunpb_testrun_proto_goTypes = nil
	file_testrunpb_testrun_proto_depIdxs = nil
}
